---
# * Create a new project
- name: "Create project"
  include: playbooks/managesf_project_create.yaml

- name: "Check if jenkins job exists"
  include: playbooks/jenkins_check_job.yaml job="{{ check[0] }}"

- name: "Check if zuul layout exists"
  include: playbooks/zuul_check_layout.yaml project_name="{{ project }}"

# * Add jobs and zuul layout to config repo
- name: "Reset config repos"
  include: playbooks/config_reset.yaml
  when: hostvars[groups["jenkins"][0]]["job_created"].stat.isdir is not defined or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0 #zuul_created.stdout.find({{ project }}) == -1

- hosts: install-server
  tasks:
    - name: "Add config repo files"
      when: hostvars[groups["jenkins"][0]]["job_created"].stat.isdir is not defined or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0
      template: src=templates/{{ item.template }}.j2 dest=/root/config/{{ item.dest }}
      with_items:
        - { template: "health-jobs.yaml", dest: "jobs/health-check.yaml" }
        - { template: "project-layout.yaml", dest: "zuul/{{ project|replace('/', '_')}}.yaml" }
        - { template: "project-jobs.yaml", dest: "jobs/{{ project|replace('/', '_')}}.yaml" }
    - name: "Commit change"
      command: chdir=/root/config bash -c "git add */*.yaml; exec git commit -a -m 'Add {{ project }} to config repo'"
      when: hostvars[groups["jenkins"][0]]["job_created"].stat.isdir is not defined or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0


- name: "Submit config repos"
  include: playbooks/config_submit_change.yaml
  when: hostvars[groups["jenkins"][0]]["job_created"].stat.isdir is not defined or hostvars[groups["zuul"][0]]["zuul_created"].rc != 0

# * Submit a bad change and verify Jenkins CI -1
# * Fix bad change and verify Jenkins CI +1
# * Check if change got merged
- hosts: install-server
  tasks:
    - name: Commit bad change and check for test error
      command: chdir={{ project_path }} {{ item }}
      with_items:
        - 'bash -c "(echo exit 1; date) > run_tests.sh"' # Add date to prevent (no new changes reject)
        - 'bash -c "(echo exit 1; date) > run_functional-tests.sh"'
        - 'chmod +x run_tests.sh run_functional-tests.sh'
        - 'git add run_tests.sh run_functional-tests.sh'
        - 'git commit -m "Test {{ project }} repo"'
        - 'submit_and_wait.py --delay 600 --failure'

    - name: "Update change and check for test SUCCESS"
      command: chdir={{ project_path }} {{ item }}
      with_items:
        - 'bash -c "(echo exit 0; date) > run_tests.sh"' # Add date to prevent (no new changes reject)
        - 'bash -c "(echo exit 0; date) > run_functional-tests.sh"'
        - 'git commit -a --amend'
        - 'submit_and_wait.py --delay 600 --approve'
        - 'git fetch --all'
      environment: {'EDITOR':'test'}

    - name: "Check change was merged"
      command: chdir={{ project_path }} git diff HEAD origin/master
      register: diff
      failed_when: diff.stdout != ''

# TODO: remove project and cleanup config-repo when: keep == false
