---
- hosts: nodepool-launcher
  remote_user: root
  tasks:
    - name: "Check service"
      command: systemctl status nodepool-launcher
      register: nodepool_service

    - name: "Check service errors"
      fail: msg='Nodepool service is not happy'
      when: nodepool_service.stdout.lower().find("fail") != -1

- name: "Reset config repos"
  include: playbooks/config_reset.yaml

# * Add image and node label to config-repo
- hosts: install-server
  remote_user: root
  tasks:
    - name: "Check if image is already defined"
      command: python -c "import yaml; exit(len(yaml.safe_load(open('{{ config_path }}/nodepool/nodepool.yaml'))['diskimages']) == 0)"
      register: sfconfiged
      failed_when: False

    - name: Adds nodepool configuration
      template:
        src: templates/nodepool.yaml.j2
        dest: "{{ config_path }}/nodepool/nodepool.yaml"
      when: sfconfiged.rc

    - name: Update change
      when: sfconfiged.rc
      command: chdir={{ config_path }}  {{ item }}
      with_items:
          - 'git commit -a -m "Add {{ provider_name }} provider"'
      environment: {'EDITOR':'test'}

- name: "Submit config repos"
  include: playbooks/config_submit_change.yaml
  when: sfconfiged.rc

- hosts: nodepool-builder
  remote_user: root
  tasks:
    - name: "Wait for image build start"
      wait_for:
        path: /var/log/nodepool/builder.log
        search_regex: "Building image.*dib-centos-7"

    - name: "Wait for image build to succeed"
      wait_for:
        path: /var/log/nodepool/builder.log
        search_regex: "DIB image dib-centos-7 is built"
        timeout: 1200

    - name: "Wait for image upload start"
      wait_for:
        path: /var/log/nodepool/builder.log
        search_regex: "Uploading DIB image build .*dib-centos-7"
        timeout: 1200

    - name: "Wait for image upload to succeed"
      wait_for:
        path: /var/log/nodepool/builder.log
        search_regex: "Image build dib-centos-7.* is ready"
        timeout: 1200

- hosts: nodepool-launcher
  remote_user: root
  tasks:
    - name: "Wait for node creation"
      wait_for:
        path: /var/log/nodepool/nodepool.log
        search_regex: "Creating server .* from image dib-centos-7"
        timeout: 1200

    - name: "Wait for node ready"
      wait_for:
        path: /var/log/nodepool/nodepool.log
        search_regex: "Node id.* is ready"
        timeout: 1200


- hosts: install-server
  remote_user: root
  tasks:
    - name: "Query the nodes REST API to get last node info"
      uri:
        url: http://managesf:20001/nodes/
        HEADER_X-Remote-User: admin
        return_content: yes
        body_format: json
      register: nodes_info

    - name: "Node API returned value"
      debug: var=nodes_info.json

    - name: "Hold the node with the REST API"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json['nodepool'][0]['node_id'] }}
        HEADER_X-Remote-User: admin

    - name: "Create a test ssh key"
      command: ssh-keygen -N '' -f /tmp/{{ nodes_info.json['nodepool'][0]['node_name'] }}_id_rsa

    - name: "Read test ssh key"
      command: cat /tmp/{{ nodes_info.json["nodepool"][0]["node_name"] }}_id_rsa.pub
      register: tmp_key

    - name: "Add the test ssh key to node's authorized keys with the REST API"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json['nodepool'][0]['node_id'] }}/authorize_key/
        method: POST
        body: "public_key={{ tmp_key.stdout|urlencode() }}"
        HEADER_X-Remote-User: admin
        return_content: yes
      register: ak_output
      failed_when: "'OK' not in ak_output.content"

    - name: "SSH into node with the test key"
      command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -q -i /tmp/{{ nodes_info.json.nodepool.0.node_name }}_id_rsa jenkins@{{ nodes_info.json.nodepool.0.ip }} whoami
      register: ssh_whoami
      failed_when: ssh_whoami.stdout.find("jenkins") == -1

    - name: "Schedule node for deletion"
      uri:
        url: http://managesf:20001/nodes/id/{{ nodes_info.json.nodepool.0.node_id }}/
        method: DELETE
        HEADER_X-Remote-User: admin
        return_content: yes
      register: del_node
      failed_when: "'delete' not in del_node.content"

    - name: "Delete test ssh key"
      file:
        path: "/tmp/{{ nodes_info.json.nodepool.0.node_name }}_{{ item }}"
        state: absent
      with_items:
        - "id_rsa"
        - "id_rsa.pub"
