---
- hosts: localhost
  tasks:
    - name: Set repositories url
      set_fact:
        git_repo_url: https://softwarefactory-project.io/r/p/software-factory
        arch_file: "/tmp/sf-config/refarch/{{ sf_arch }}.yaml"

    - name: Get git repositories
      git:
        repo: "{{ git_repo_url }}/{{ item }}"
        dest: "/tmp/{{ item }}"
        force: yes
      with_items:
        - sf-heat-templates
        - sf-config

    - name: Use rdo flavor
      replace:
        path: '{{ arch_file }}'
        regexp: '(\s+flavor:) (m1\.*)'
        replace: '\1 rdo.\2'

    - name: Create heat template based on sf_arch
      command: "python render.py --arch {{ arch_file }}"
      args:
        chdir: /tmp/sf-heat-templates/

    - include_tasks: tasks/deploy-heat/destroy_stack.yml

    - include_tasks: tasks/deploy-heat/create_stack.yml

    - name: Get stack facts
      os_stack_get:
        name: "sf-{{ sf_version }}-{{ sf_arch }}"
      register: stack

    - name: Get ip and slave network facts
      set_fact:
        slave_net: "{{ stack.stack.outputs[0]['output_value'].split()[-1] }}"
        managesf_ip: "{{ floatingip }}"
      when: floatingip != ""

    - name: Get ip and slave network facts
      set_fact:
        slave_net: "{{ stack.stack.outputs[-2]['output_value'].split()[-1] }}"
        managesf_ip: "{{ stack.stack.outputs[0]['output_value'].split()[-1] }}"
      when: floatingip == ""

    - name: Copy arch file
      copy:
        src: "{{ arch_file }}"
        dest: /tmp/arch.yaml

    - name: Replace private with public ip for add_host statement
      lineinfile:
        path: /tmp/arch.yaml
        regexp: "    ip: 192.168.0.10"
        line: "    ip: {{ managesf_ip }}"

    - name: Include arch file
      include_vars:
          file: /tmp/arch.yaml
          name: arch_hosts

    - name: Create ~/.ssh/config file
      template:
        src: ssh_config.j2
        dest: ~/.ssh/config
        mode: 0600

    - name: Wait for ssh
      wait_for:
        host: "{{ managesf_ip }}"
        port: 22
        delay: 10
        search_regex: OpenSSH

    - name: Run ssh-keyscan from hostname
      shell: 'ssh-keyscan -t rsa {{ item.name }} >> ~/.ssh/known_hosts'
      with_items: '{{ arch_hosts.inventory }}'

    - name: Add host inventory
      set_fact:
        inventory: "{{ arch_hosts.inventory }}"

    - name: Add all hosts in inventory
      add_host:
        hostname: "{{ item.ip }}"
        ansible_host: "{{ item.name }}"
      with_items: "{{ arch_hosts.inventory }}"

    - name: Add service per host in inventory
      add_host:
        name: "{{ item.0.ip }}"
        group: "{{ item.1 }}"
      with_subelements:
        - "{{ arch_hosts.inventory }}"
        - roles

    - name: Populate /etc/hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item.ip }} {{ item.name }}$'
        line: "{{ item.ip }} {{ item.name }}"
        state: present
      become: yes
      with_items: "{{ arch_hosts.inventory }}"

- hosts: all
  remote_user: centos
  tasks:
    - name: Allow root access
      command: sed -i 's/^.*rather than the user ..root.* ssh-rsa/ssh-rsa/' /root/.ssh/authorized_keys
      become: yes
      # disable warning:
      # [WARNING]: Consider using template or lineinfile module rather than running sed
      args:
        warn: false

    - name: Checkout SF DEV public key
      git:
        repo: 'https://softwarefactory-project.io/r/SF_devs_public_keys'
        dest: /tmp/SF_devs_public_keys

    - name: Add SF DEV public keys
      become: yes
      shell: "cat /tmp/SF_devs_public_keys/authorized_keys >> /root/.ssh/authorized_keys"

    - name: Remove SF DEV public key checkout
      file:
        path: /tmp/SF_devs_public_keys
        state: absent

- hosts: install-server
  remote_user: centos
  tasks:

    - name: Set fact install-server ssh keys dir
      set_fact:
          ssh_keys_dir: "/var/lib/software-factory/bootstrap-data/ssh_keys"

    - name: Ensure ssh key dir exists
      file:
        path: "{{ ssh_keys_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0700
      become: true

    - name: Generate service_rsa ssh key
      user:
        name: root
        ssh_key_file: "{{ ssh_keys_dir }}/service_rsa"
        generate_ssh_key: yes
      become: true

    - name: Copy service_rsa ssh key in /root/.ssh dir
      copy:
        remote_src: yes
        src: "{{ ssh_keys_dir }}/service_rsa"
        dest: /root/.ssh/id_rsa
        mode: 0600
      become: true

    - name: Get server-rsa ssh pubkey
      fetch:
        src: "{{ ssh_keys_dir }}/service_rsa.pub"
        dest: /tmp/id_rsa.pub
        flat: yes
      become: true

    - include_tasks: tasks/customize_latest.yml

- hosts: all
  remote_user: centos
  tasks:
    - name: Copy /etc/hosts
      copy:
        src: /etc/hosts
        dest: /etc/hosts
      become: true

    - name: Set fact install-server ssh pubkey
      set_fact:
          install_server_rsa_pub: "{{ lookup('file', '/tmp/id_rsa.pub') }}"

    - name: Add service_rsa ssh pub key
      authorized_key:
        user: root
        key: "{{ install_server_rsa_pub }}"
      become: yes

    - name: Update all packages
      yum:
        name: "*"
        state: latest
      become: yes

- hosts: install-server
  remote_user: centos
  tasks:
    - name: Set instance facts
      set_fact:
        instances: "{{ hostvars['localhost']['instances'] }}"

    - name: Run ssh-keyscan from hostname
      shell: ssh-keyscan -t rsa {{ item.key }} >> /root/.ssh/known_hosts
      with_dict: "{{ instances }}"
      become: yes

    - name: Run ssh-keyscan from ip address
      shell: ssh-keyscan -t rsa {{ item.value }} >> /root/.ssh/known_hosts
      with_dict: "{{ instances }}"
      become: yes

    - name: Copy arch file
      copy:
        src: "/usr/share/sf-config/refarch/{{ sf_arch }}.yaml"
        dest: /etc/software-factory/arch.yaml
        remote_src: True
      become: yes

    - name: Run sfconfig
      command: "sfconfig  --enable-insecure-slaves"
      become: yes
      when: skip_sfconfig|default("no") == "no"

    - name: Fetch deployment group_vars
      fetch:
        src: /var/lib/software-factory/ansible/group_vars/all.yaml
        dest: "{{ workspace }}/all.yaml"
        flat: yes
      become: yes

    - name: Load deployment group_vars
      include_vars:
        file: "{{ workspace }}/all.yaml"
      no_log: True

    - name: Load health-check group_vars
      include_vars:
        file: "{{ sf_ci }}/health-check/group_vars/all.yaml"
      no_log: True

- include_tasks: "../health-check/nodepool3.yaml"
  vars:
    os_slave_net: "{{ hostvars.get('localhost', {}).get('slave_net', 'default') }}"

- include_tasks: "../health-check/zuul3.yaml"
