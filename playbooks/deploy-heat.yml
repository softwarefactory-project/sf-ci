---
- hosts: localhost
  tasks:
    - block:
        - name: Check for local ssh key
          stat:
            path: "{{ home }}/.ssh/id_rsa"
          register: local_key

        - name: Create ssh key when missing
          command: "ssh-keygen -N '' -f {{ home }}/.ssh/id_rsa"
          when: not local_key.stat.exists

        - name: Cleanup old keypair
          os_keypair:
            state: absent
            name: temp_id_rsa

        - name: Upload keypair
          os_keypair:
            state: present
            name: temp_id_rsa
            public_key_file: "{{ home }}/.ssh/id_rsa.pub"
      when: manage_key|default('yes') == 'yes'

    - block:
        # Floating-ip needs to be manually detached when using fixed-ip stack...
        - name Detach floating ip
          os_floating_ip:
            state: absent
            floating_ip_address: "{{ floatingip }}"
            server: "managesf.{{ sf_domain }}"
          when: reset_stack|default("yes") == "yes" and floatingip != ""
          ignore_errors: yes
          register: os_floating_ip_result
          until: os_floating_ip_result|success
          retries: 3
          delay: 5

        - name: Clean nodepool resources
          command: "{{ sf_ci }}/scripts/clean_nodepool.sh"
          when: reset_stack|default("yes") == "yes"

        - name: Destroy stacks
          os_stack:
            name: "sf-{{ sf_version }}-{{ sf_arch }}"
            state: "absent"
          when: reset_stack|default("yes") == "yes"
          register: os_stack_result
          until: os_stack_result|success
          retries: 3
          delay: 5

        - name: Remove all line in ~/.ssh/known_hosts
          command: "echo > ~/.ssh/known_hosts"
          args:
            warn: False

    - block:
        - name: Set image facts
          set_fact:
            raw_image: "{{ workspace }}/sf-{{ sf_version }}.raw"
            qcow2_image: "{{ workspace }}/sf-{{ sf_version }}.qcow2"

        - name: Download image when missing
          get_url:
            url: "{{ image_url }}"
            dest: "{{ qcow2_image }}"
          register: new_image

        - name: Remove image
          os_image:
            name: "sf-{{ sf_version }}"
            state: absent
          when: new_image|changed

        - name: Convert image in raw
          shell: "qemu-img convert -f qcow2 -O raw {{ qcow2_image }} {{ raw_image }}"
          when: new_image|changed

        - name: Upload image
          os_image:
            name: "sf-{{ sf_version }}"
            container_format: bare
            disk_format: raw
            state: present
            filename: "{{ raw_image }}"
          register: image
      when: manage_image|default('yes') == 'yes'

    - block:
        - name: Get image facts
          os_image:
            name: "sf-{{ sf_version }}"
          register: image

        - debug:
            msg: "Deploying {{ stack_url }}"

        - name: Deploy stack using fixed ip
          os_stack:
            name: "sf-{{ sf_version }}-{{ sf_arch }}"
            rollback: no
            template: sf-master-dual-zuul-fixed-ip.hot
            parameters:
              key_name: "temp_id_rsa"
              image_id: "{{ image.id }}"
              floatingip_id: "{{ floatingip_id|default(omit) }}"
              domain: "{{ sf_domain }}"
              external_network: "{{ external_network }}"
          when: floatingip_id != ""
          register: stack

        - name: Deploy stack
          os_stack:
            name: "sf-{{ sf_version }}-{{ sf_arch }}"
            rollback: no
            template: sf-master-dual-zuul-fixed-ip.hot
            parameters:
              key_name: "temp_id_rsa"
              image_id: "{{ image.id }}"
              domain: "{{ sf_domain }}"
              external_network: "{{ external_network }}"
          when: not floatingip_id
          register: stack
      when: manage_stack|default('yes') == 'yes'

    - name: Get stack facts
      os_stack_get:
        name: "sf-{{ sf_version }}-{{ sf_arch }}"
      register: stack

    - name: Get ip and slave network facts
      set_fact:
        slave_net: "{{ stack.stack.outputs[0]['output_value'].split()[-1] }}"
        managesf_ip: "{{ floatingip }}"
      when: floatingip != ""

    - name: Get ip and slave network facts
      set_fact:
        slave_net: "{{ stack.stack.outputs[-2]['output_value'].split()[-1] }}"
        managesf_ip: "{{ stack.stack.outputs[0]['output_value'].split()[-1] }}"
      when: floatingip == ""

    - name: Get instances facts
      os_server_facts:
        server: "*.{{ sf_domain }}"

    - name: Create a dict with hostnames and ip address
      set_fact:
        instances: "{{ instances | default({}) | combine( {item.name: item.public_v4} ) }}"
      with_items: "{{ openstack_servers }}"
      no_log: true

    - name: Wait for ssh
      wait_for:
        host: "{{ item.value }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
      with_dict: "{{ instances }}"

#    # TODO: check if it's used before deletion
#    - name: Wait for SSH on the Instance
#      command: "ssh -oBatchMode=yes -oStrictHostKeyChecking=no root@{{ item.value }} true"
#      register: result
#      until: result|success
#      retries: 30
#      delay: 10
#      with_dict: "{{ instances }}"
#
#    # TODO: check if it's used before deletion
#    - add_host:
#        name: "{{ managesf_ip }}"
#        group: "{{ item }}"
#      with_items:
#        - install-server
#        - nodepool-launcher
#        - nodepool-builder
#        - jenkins
#        - zuul-server

    - add_host:
        hostname: "{{ item.value }}"
        group: "{{ item.key }}"
        ansible_host: "{{ item.key }}"
      with_dict: "{{ instances }}"

    - name: "Populate /etc/hosts"
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ item.value }} {{ item.key }}"
        state: present
      become: True
      with_dict: "{{ instances }}"

- hosts: all
  remote_user: centos
  tasks:
    - debug:
        msg: "slave net is {{ hostvars.get('localhost', {}).get('slave_net', 'default') }}"

    - name: Allow root access
      command: sed -i 's/^.*rather than the user ..root.* ssh-rsa/ssh-rsa/' /root/.ssh/authorized_keys
      become: yes
      # disable warning:
      # [WARNING]: Consider using template or lineinfile module rather than running sed 
      args:
        warn: false

    - include: tasks/customize_latest.yml

#    - name: Run sfconfig
#      command: sfconfig
#      become: yes
#      when: skip_sfconfig|default("no") == "no"
#
#    # Specifying a destination path
#    - name: Fetch deployment group_vars
#      fetch:
#        src: /var/lib/software-factory/ansible/group_vars/all.yaml
#        dest: "{{ workspace }}/all.yaml"
#        flat: yes
#      become: yes
#
#    - name: Load deployment group_vars
#      include_vars:
#        file: "{{ workspace }}/all.yaml"
#      no_log: True
#
#    - name: Load health-check group_vars
#      include_vars:
#        file: "{{ sf_ci }}/health-check/group_vars/all.yaml"
#      no_log: True
#
#- include: "../health-check/nodepool.yaml"
#  vars:
#    os_slave_net: "{{ hostvars.get('localhost', {}).get('slave_net', 'default') }}"
#
#- include: "../health-check/zuul.yaml"
