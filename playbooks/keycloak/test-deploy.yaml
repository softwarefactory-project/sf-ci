---
- hosts: server
  tasks:
    - set_fact:
        zuul_output_dir: "{{ ansible_user_dir }}/zuul-output"
    - file:
        path: "{{ zuul_output_dir }}/logs/jars/"
        state: directory

    - name: Install maven
      package:
        name: maven
        state: present
      become: true

    - debug:
        msg: "{{ ansible_user_dir }}/{{ item.project.src_dir }}/pom.xml"
      loop: "{{ zuul['items'] }}"

    - stat:
        path: "{{ ansible_user_dir }}/{{ item.project.src_dir }}/pom.xml"
      register: pom_stats
      loop: "{{ zuul['items'] }}"

    - command: >
        /usr/bin/mvn clean install -l
        {{ zuul_output_dir }}/logs/{{ item.item.project.short_name }}-maven-build.log
      args:
        chdir: "{{ ansible_user_dir}}/{{ item.item.project.src_dir }}"
      when: "item.stat.exists"
      loop: "{{ pom_stats.results }}"

    - shell: >
        cp {{ansible_user_dir}}/{{ item.item.project.src_dir }}/target/*.jar
        {{ zuul_output_dir }}/logs/jars
      when: "item.stat.exists"
      loop: "{{ pom_stats.results }}"

    - name: Install sf-rpm-build artifact repository
      yum_repository:
        name: sf-rpm-build
        description: SF rpm-build repository
        baseurl: "{{ buildset_artifacts_url }}"
        gpgcheck: no
      become: true
      when: buildset_artifacts_url is defined

    - name: Install SF master repository if there is no pre-build
      become: true
      yum_repository:
        name: sf-master
        description: SF master repository
        baseurl: https://softwarefactory-project.io/kojifiles/repos/sf-master-el7/
        gpgcheck: no
      when: buildset_artifacts_url is not defined

    - name: Install keycloak
      package:
        name: keycloak
        state: present
      become: true

    - name: Configure standalone deployment
      copy:
        src: standalone.xml
        dest: /opt/jboss/keycloak/standalone/configuration/standalone.xml
        mode: '0440'
        owner: keycloak
        group: keycloak
      become: true

    - name: Detect dependency build of the MQTT event listener extension
      shell: ls {{ zuul_output_dir }}/logs/jars/event-listener-*-dependencies.jar
      register: event_listener_jar_path
      ignore_errors: true

    - shell: >
        cp {{ event_listener_jar_path.stdout|trim }}
        /opt/jboss/keycloak/standalone/deployments/event-listener-mqtt.jar
      when: event_listener_jar_path.rc == 0
      become: true

    - name: Detect dependency build of the Github SSH key mapper
      shell: ls {{ zuul_output_dir }}/logs/jars/github-ssh-mapper-*.jar
      register: github_ssh_mapper_jar_path
      ignore_errors: true

    - shell: >
        cp {{ github_ssh_mapper_jar_path.stdout|trim }}
        /opt/jboss/keycloak/standalone/deployments/github-ssh-mapper.jar
      when: github_ssh_mapper_jar_path.rc == 0
      become: true

    - name: Install SF master repository to install mosquitto
      become: true
      yum_repository:
        name: sf-master
        description: SF master repository
        baseurl: https://softwarefactory-project.io/kojifiles/repos/sf-master-el7/
        gpgcheck: no

    - name: install mosquitto
      package:
        name: mosquitto
        state: present
      become: true

    - name: Start MQTT service
      systemd:
        state: restarted
        daemon_reload: yes
        name: mosquitto
      become: true

    - name: Install mosquitto_sub service
      copy:
        src: mosquitto-client-tests.service
        dest: /lib/systemd/system/mosquitto-client-tests.service
        mode: 0640
      become: true

    - name: Start mosquitto_sub service
      systemd:
        state: restarted
        daemon_reload: yes
        name: mosquitto-client-tests
      become: true

    - name: Create admin user
      shell: /opt/jboss/keycloak/bin/add-user-keycloak.sh -r master -u admin -p admin
      become: true

    - name: Start service
      service:
        name: keycloak
        state: started
        enabled: "yes"
      become: true

    - name: Wait for service to be ready
      uri:
        url: "http://localhost:8080/auth"
        method: GET
        follow_redirects: all
      register: _result
      until: _result.status == 200
      retries: 100
      delay: 2

    - name: Create a realm
      command: |
        /opt/jboss/keycloak/bin/kcadm.sh create realms
        -s realm=test
        -s enabled=true
        --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: Activate the MQTT event listener
      command: |
        /opt/jboss/keycloak/bin/kcadm.sh update events/config
            -r test
            -s 'eventsListeners=["jboss-logging","mqtt"]'
            -s eventsEnabled=true
            -s enabledEventTypes=[]
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: create a realm user
      command: >
        /opt/jboss/keycloak/bin/kcadm.sh create users
            -r test
            -s 'username=testuser'
            -s 'email=testuser@testdomain.com'
            -s 'firstName=test'
            -s 'lastName=user'
            -s 'enabled=true'
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: retrieve user info
      command: >
        /opt/jboss/keycloak/bin/kcadm.sh get users
            -r test
            -q username=testuser
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin
      register: testuser_info

    - debug:
        var: testuser_info.stdout_lines[1:]
        verbosity: 0

    - name: set user info as fact
      set_fact:
        testuser: "{{ testuser_info.stdout_lines[1:] | join('\n') | from_json }}"

    - debug:
        var: testuser
        verbosity: 0

    - name: set test user password
      command: >
        /opt/jboss/keycloak/bin/kcadm.sh set-password
            -r test
            --userid {{ testuser[0]['id'] }}
            --new-password testpassword
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: attempt cURL login
      uri:
        url: http://localhost:8080/auth/realms/test/protocol/openid-connect/token
        method: POST
        body:
          client_id: admin-cli
          username: testuser
          password: testpassword
          grant_type: password
        status_code: 200
        body_format: form-urlencoded
      register: token
      failed_when: "'access_token' not in token.json"

    - name: Create a github identity provider
      command: |
        /opt/jboss/keycloak/bin/kcadm.sh create identity-provider/instances
            -r test
            -s alias=github
            -s providerId=github
            -s enabled=true
            -s 'config.useJwksUrl="true"'
            -s config.clientId=fbf3c0514eb3b0180911
            -s config.clientSecret=TODO
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: Create the SSH key mapper
      command: |
        /opt/jboss/keycloak/bin/kcadm.sh create identity-provider/instances/github/mappers
            -r test
            -s name=pubkey_mapper
            -s identityProviderMapper=github-ssh-key-mapper
            -s 'config={"keyAttribute":"publicKey"}'
            -s identityProviderAlias=github
            --no-config --server http://localhost:8080/auth --realm master --user admin --password admin

    - name: Install dependencies for GUI login testing
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - "@X Window System"
        # - "@Desktop"
        - "@Fonts"
        - firefox
        - ImageMagick
        - Xvfb
      become: true

    - name: Start Xvfb as a background process
      shell: "(Xvfb :99 -screen 0 1024x768x16 > /dev/null 2>&1 &)"

    - name: Stop service
      service:
        name: keycloak
        state: stopped
      become: true

    - name: look for fatal errors
      lineinfile:
        path: "/opt/jboss/keycloak/standalone/log/server.log"
        line: "FATAL"
        state: present
      check_mode: yes
      register: fatality
      failed_when: fatality is not changed

    - name: Check logging of a log in event
      command: grep \'LOGIN\' /var/log/keycloak_mqtt.log
